package com.lecture.aiData;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.lecture.onnx.TestMainOnnx;

@RestController
public class AiRestController {
	
	private final Logger log = LoggerFactory.getLogger(this.getClass().getSimpleName());
	
	
	@PostMapping(value = "/getAiData") 
	   public Map<String, Object> getAiData(MultipartHttpServletRequest request) throws Exception{
	   
	      log.info("##getAiData 호출 됨##");
	      
	      Map<String, Object> jsonResult = new HashMap<String, Object>();//APP로 전달  Map값

	      Map<String, MultipartFile> fileMap = request.getFileMap();
	      
	      String fileSavePath = "C:/YOLO_DATA/serverFile/";

	      for(String key : fileMap.keySet()) {
	         MultipartFile file = fileMap.get(key);
	         try {
	            
	            String aiChkFilePath = fileSavePath;
	            // 파일을 저장할 경로를 Path 객체로 받는다.
	            Path directory = Path.of(aiChkFilePath).toAbsolutePath().normalize() ;
	            Path targetPath = directory.resolve("temp.png").normalize();
	            
	            //파일 저장
	            file.transferTo(targetPath);
	            String saveFile = targetPath.toString();
	            log.info("saveFile :"+saveFile);
	            log.info(" 실행되나요!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! :"+saveFile);
	          
	            TestMainOnnx testMainOnnx = new TestMainOnnx();
	            testMainOnnx.run();  // AI 모델 실행 및 예측 결과 출력
	            log.info("AI 예측 결과가 출력되었습니다.");
	            @PostMapping(value = "/getAiData") 
	            public Map<String, Object> getAiData(MultipartHttpServletRequest request) throws Exception {
	               
	                log.info("##getAiData 호출 됨##");
	                
	                Map<String, Object> jsonResult = new HashMap<String, Object>();//APP로 전달  Map값

	                Map<String, MultipartFile> fileMap = request.getFileMap();
	                
	                String fileSavePath = "C:/YOLO_DATA/serverFile/";

	                for(String key : fileMap.keySet()) {
	                    MultipartFile file = fileMap.get(key);
	                    try {
	                        String aiChkFilePath = fileSavePath;
	                        // 파일을 저장할 경로를 Path 객체로 받는다.
	                        Path directory = Path.of(aiChkFilePath).toAbsolutePath().normalize();
	                        Path targetPath = directory.resolve("temp.png").normalize();
	                        
	                        // 파일 저장
	                        file.transferTo(targetPath);
	                        String saveFile = targetPath.toString();
	                        log.info("saveFile :"+saveFile);

	                        // AI 모델 실행
	                        TestMainOnnx testMainOnnx = new TestMainOnnx();
	                        testMainOnnx.run();  // AI 모델 실행 및 예측 결과 출력
	                        log.info("AI 예측 결과가 출력되었습니다.");

	                        // 경계 상자를 포함한 이미지 출력
	                        BufferedImage image = ImageIO.read(new File(saveFile));
	                        // 예측 경계 상자와 함께 이미지 그리기 (ONNX 모델로부터 얻은 예측 데이터 사용)
	                        List<ArrayList<Float>> predictor = testMainOnnx.onnxModelUtil.predictor(Imgcodecs.imread(saveFile), testMainOnnx.onnxModel);
	                        BufferedImage outputImage = testMainOnnx.drawImage(image, predictor, fileSavePath);
	                        
	                        // 결과 이미지 스윙으로 표시
	                        testMainOnnx.displayImage(outputImage, "AI 예측 결과");

	                    } catch (Exception e) {
	                        jsonResult.put("resultMsg", "파일 업로드 오류: " + e.getMessage());
	                    }
	                }

	                return jsonResult;
	            }

	            
	         } catch (Exception e) {
	            jsonResult.put("resultMsg", "파일 업로드 오류:"+e.getMessage());
	         }
	      }

	      return jsonResult;
	   }
	
}
